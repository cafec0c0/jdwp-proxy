pub fn command_set_to_name(command_set: u8) -> &'static str {
    match command_set {
        1 => "VirtualMachine",
        2 => "ReferenceType",
        3 => "ClassType",
        4 => "ArrayType",
        5 => "InterfaceType",
        6 => "Method",
        8 => "Field",
        9 => "ObjectReference",
        10 => "StringReference",
        11 => "ThreadReference",
        12 => "ThreadGroupReference",
        13 => "ArrayReference",
        14 => "ClassLoaderReference",
        15 => "EventRequest",
        16 => "StackFrame",
        17 => "ClassObjectReference",
        18 => "ModuleReference",
        64 => "Event",
        _ => "Unknown",
    }
}

pub fn command_to_name(command_set: u8, command: u8) -> &'static str {
    match command_set {
        1 => match command {
            1 => "Version",
            2 => "ClassesBySignature",
            3 => "AllClasses",
            4 => "AllThreads",
            5 => "TopLevelThreadGroups",
            6 => "Dispose",
            7 => "IDSizes",
            8 => "Suspend",
            9 => "Resume",
            10 => "Exit",
            11 => "CreateString",
            12 => "Capabilities",
            13 => "ClassPaths",
            14 => "DisposeObjects",
            15 => "HoldEvents",
            16 => "ReleaseEvents",
            17 => "CapabilitiesNew",
            18 => "RedefineClasses",
            19 => "SetDefaultStratum",
            20 => "AllClassesWithGeneric",
            21 => "InstanceCounts",
            22 => "AllModules",
            _ => "Unknown",
        },
        2 => match command {
            1 => "Signature",
            2 => "ClassLoader",
            3 => "Modifiers",
            4 => "Fields",
            5 => "Methods",
            6 => "GetValues",
            7 => "SourceFile",
            8 => "NestedTypes",
            9 => "Status",
            10 => "Interfaces",
            11 => "ClassObject",
            12 => "SourceDebugExtension",
            13 => "SignatureWithGeneric",
            14 => "FieldsWithGeneric",
            15 => "MethodsWithGeneric",
            16 => "Instances",
            17 => "ClassFileVersion",
            18 => "ConstantPool",
            19 => "Module",
            _ => "Unknown",
        },
        3 => match command {
            1 => "Superclass",
            2 => "SetValues",
            3 => "InvokeMethod",
            4 => "NewInstance",
            _ => "Unknown",
        },
        4 => match command {
            1 => "NewInstance",
            _ => "Unknown",
        },
        5 => match command {
            1 => "InvokeMethod",
            _ => "Unknown",
        },
        6 => match command {
            1 => "LineTable",
            2 => "VariableTable",
            3 => "Bytecodes",
            4 => "IsObsolete",
            5 => "VariableTableWithGeneric",
            _ => "Unknown",
        },
        9 => match command {
            1 => "ReferenceType",
            2 => "GetValues",
            3 => "SetValues",
            5 => "MonitorInfo",
            6 => "InvokeMethod",
            7 => "DisableCollection",
            8 => "EnableCollection",
            9 => "IsCollected",
            10 => "ReferringObjects",
            _ => "Unknown",
        },
        10 => match command {
            1 => "Value",
            _ => "Unknown",
        },
        11 => match command {
            1 => "Name",
            2 => "Suspend",
            3 => "Resume",
            4 => "Status",
            5 => "ThreadGroup",
            6 => "Frames",
            7 => "FrameCount",
            8 => "OwnedMonitors",
            9 => "CurrentContendedMonitor",
            10 => "Stop",
            11 => "Interrupt",
            12 => "SuspendCount",
            13 => "OwnedMonitorsStackDepthInfo",
            14 => "ForceEarlyReturn",
            15 => "IsVirtual",
            _ => "Unknown",
        },
        12 => match command {
            1 => "Name",
            2 => "Parent",
            3 => "Child",
            _ => "Unknown",
        },
        13 => match command {
            1 => "Length",
            2 => "GetValues",
            3 => "SetValues",
            _ => "Unknown",
        },
        14 => match command {
            1 => "VisibleClasses",
            _ => "Unknown",
        },
        15 => match command {
            1 => "Set",
            2 => "Clear",
            3 => "ClearAllBreakpoints",
            _ => "Unknown",
        },
        16 => match command {
            1 => "GetValues",
            2 => "SetValues",
            3 => "ThisObject",
            4 => "PopFrames",
            _ => "Unknown",
        },
        17 => match command {
            1 => "ReflectedType",
            _ => "Unknown",
        },
        18 => match command {
            1 => "Name",
            2 => "ClassLoader",
            _ => "Unknown",
        },
        64 => match command {
            100 => "Composite",
            _ => "Unknown",
        },
        _ => "Unknown",
    }
}

pub fn header_to_string(header: &[u8; 11]) -> String {
    let len = u32::from_be_bytes(header[..4].try_into().unwrap());
    let id = u32::from_be_bytes(header[4..8].try_into().unwrap());

    if header[8] == 0x80 {
        let error = u16::from_be_bytes(header[9..11].try_into().unwrap());
        format!(
            "Reply (length = {}, id = {}, error = {})",
            len,
            id,
            error_to_string(error)
        )
    } else {
        let command_set = header[9];
        let command = header[10];

        format!(
            "Command (length = {}, id = {}, command = {}.{})",
            len,
            id,
            command_set_to_name(command_set),
            command_to_name(command_set, command)
        )
    }
}

pub fn error_to_string(error: u16) -> &'static str {
    match error {
        0 => "NONE",
        10 => "INVALID_THREAD",
        11 => "INVALID_THREAD_GROUP",
        12 => "INVALID_PRIORITY",
        13 => "THREAD_NOT_SUSPENDED",
        14 => "THREAD_SUSPENDED",
        15 => "THREAD_NOT_ALIVE",
        20 => "INVALID_OBJECT",
        21 => "INVALID_CLASS",
        22 => "CLASS_NOT_PREPARED",
        23 => "INVALID_METHODID",
        24 => "INVALID_LOCATION",
        25 => "INVALID_FIELDID",
        30 => "INVALID_FRAMEID",
        31 => "NO_MORE_FRAMES",
        32 => "OPAQUE_FRAME",
        33 => "NOT_CURRENT_FRAME",
        34 => "TYPE_MISMATCH",
        35 => "INVALID_SLOT",
        40 => "DUPLICATE",
        41 => "NOT_FOUND",
        42 => "INVALID_MODULE",
        50 => "INVALID_MONITOR",
        51 => "NOT_MONITOR_OWNER",
        52 => "INTERRUPT",
        60 => "INVALID_CLASS_FORMAT",
        61 => "CIRCULAR_CLASS_DEFINITION",
        62 => "FAILS_VERIFICATION",
        63 => "ADD_METHOD_NOT_IMPLEMENTED",
        64 => "SCHEMA_CHANGE_NOT_IMPLEMENTED",
        65 => "INVALID_TYPESTATE",
        66 => "HIERARCHY_CHANGE_NOT_IMPLEMENTED",
        67 => "DELETE_METHOD_NOT_IMPLEMENTED",
        68 => "UNSUPPORTED_VERSION",
        69 => "NAMES_DONT_MATCH",
        70 => "CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED",
        71 => "METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED",
        72 => "CLASS_ATTRIBUTE_CHANGE_NOT_IMPLEMENTED",
        99 => "NOT_IMPLEMENTED",
        100 => "NULL_POINTER",
        101 => "ABSENT_INFORMATION",
        102 => "INVALID_EVENT_TYPE",
        103 => "ILLEGAL_ARGUMENT",
        110 => "OUT_OF_MEMORY",
        111 => "ACCESS_DENIED",
        112 => "VM_DEAD",
        113 => "INTERNAL",
        115 => "UNATTACHED_THREAD",
        500 => "INVALID_TAG",
        502 => "ALREADY_INVOKING",
        503 => "INVALID_INDEX",
        504 => "INVALID_LENGTH",
        506 => "INVALID_STRING",
        507 => "INVALID_CLASS_LOADER",
        508 => "INVALID_ARRAY",
        509 => "TRANSPORT_LOAD",
        510 => "TRANSPORT_INIT",
        511 => "NATIVE_METHOD",
        512 => "INVALID_COUNT",
        _ => "Unknown",
    }
}
